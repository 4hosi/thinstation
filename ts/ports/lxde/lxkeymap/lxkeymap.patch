=== modified file 'bin/lxkeymap'
--- bin/lxkeymap	2012-02-05 14:08:14 +0000
+++ bin/lxkeymap	2012-04-18 12:56:31 +0000
@@ -137,10 +137,7 @@
         active_group = state['group']
 
         self.layout_current = server.get_layouts()#[active_group] # We handle now multiple layouts
-        try:
-            self.variant_current = server.get_variants()#[active_group]
-        except IndexError:
-            self.variant_current = ""
+        self.variant_current = server.get_variants()#[active_group]
 
         # Get options here
         self.options_current = server.get_options()
@@ -148,16 +145,7 @@
 
         engine.stop_listen(xklavier.XKLL_TRACK_KEYBOARD_STATE)
 
-        #Init ConfigParser
-        self.config = ConfigParser.RawConfigParser()
-        if not os.path.exists(homedir+'/.config/lxkeymap.cfg'): 
-            self.config.add_section('Global')
-            self.config.set('Global', 'Layout', self.layout_current[0])
-            self.config.set('Global', 'Variant', self.variant_current[0])
-            self.config.set('Global', 'Option', self.options_current[0]) 
-            with open(homedir+'/.config/lxkeymap.cfg', 'wb') as configfile:
-                self.config.write(configfile)
-        self.config.readfp(open(homedir+'/.config/lxkeymap.cfg'))
+        self.init_config_parser()
 
         # Create a TreeStore with one string column to use as the model
         self.treestore_profiles = gtk.TreeStore(str)
@@ -277,6 +265,30 @@
             else:
                 self.status.set_text(_("Current Keymap: %s") % (self.layout_current[0]))
 
+    def init_config_parser(self):
+        """Initialize configuration"""
+        self.config = ConfigParser.RawConfigParser()
+        if not os.path.exists(homedir+'/.config/lxkeymap.cfg'): 
+            self.config.add_section('Global')
+            try:
+                self.config.set('Global', 'Layout', self.layout_current[0])
+            except:
+                self.config.set('Global', 'Layout', "")
+            
+            try:
+                self.config.set('Global', 'Variant', self.variant_current[0])
+            except IndexError:
+                self.config.set('Global', 'Variant', "")
+            
+            try:
+                self.config.set('Global', 'Option', self.options_current[0])
+            except IndexError:
+                self.config.set('Global', 'Option', "")
+            
+            with open(homedir+'/.config/lxkeymap.cfg', 'wb') as configfile:
+                self.config.write(configfile)
+        self.config.readfp(open(homedir+'/.config/lxkeymap.cfg'))
+        
     def print_option(self, c_reg, item, parent):
         #print ('\t %s (%s)' % (item.get_description(), item.get_name())) #DEBUG
         if item.get_name() in self.options_current: 
@@ -468,23 +480,25 @@
         except: 
             pass
         self.config.set(self.section, 'Layout',(self.country_selected).lower())
-        self.config.set(self.section, 'Variant',self.variant_current[-1])
+        try:
+            self.config.set(self.section, 'Variant',self.variant_current[-1])
+        except IndexError:
+            self.config.set(self.section, 'Variant', '')
         if len(self.options_current) > 0:
             print self.options_current # DEBUG
             self.config.set(self.section, 'Option', self.options_current[-1])
         else:
-            self.options_current = ['']
-            self.config.set(self.section, 'Option', self.options_current[-1])
+            self.config.set(self.section, 'Option', '')
         with open(homedir+'/.config/lxkeymap.cfg', 'wb') as configfile:
             self.config.write(configfile)
 
     def loadFromConfig(self):
+        layout_saved = []
+        variant_saved = []
+        options_saved = []
         if os.path.exists(homedir+'/.config/lxkeymap.cfg'):
             config = ConfigParser.RawConfigParser()
             config.read(homedir+'/.config/lxkeymap.cfg')
-            layout_saved = []
-            variant_saved = []
-            options_saved = []
             for i in config.sections():
                 layout_saved.append(config.get(i, 'Layout'))
                 variant_saved.append(config.get(i, 'Variant'))

