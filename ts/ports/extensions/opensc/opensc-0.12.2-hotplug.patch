diff -ur opensc-0.12.2.orig/src/pkcs11/pkcs11-global.c opensc-0.12.2/src/pkcs11/pkcs11-global.c
--- opensc-0.12.2.orig/src/pkcs11/pkcs11-global.c	2011-07-05 06:28:53.000000000 -0500
+++ opensc-0.12.2/src/pkcs11/pkcs11-global.c	2011-10-20 23:53:31.364789168 -0500
@@ -37,6 +37,7 @@
 #endif
 static int in_finalize = 0;
 extern CK_FUNCTION_LIST pkcs11_function_list;
+extern struct sc_pkcs11_slot * reader_get_slot(sc_reader_t *reader);
 
 #if defined(HAVE_PTHREAD) && defined(PKCS11_THREAD_LOCKING)
 #include <pthread.h>
@@ -239,15 +240,17 @@
 	list_init(&virtual_slots);
 	list_attributes_seeker(&virtual_slots, slot_list_seeker);
 	
-	/* Create a slot for a future "PnP" stuff. */
-	if (sc_pkcs11_conf.plug_and_play) {
-		create_slot(NULL);
-	}
 	/* Create slots for readers found on initialization */
 	for (i=0; i<sc_ctx_get_reader_count(context); i++) {
 		initialize_reader(sc_ctx_get_reader(context, i));
 	}
 
+	/* Create a slot for a future "PnP" stuff. */
+	if (sc_pkcs11_conf.plug_and_play && list_size(&virtual_slots)==0) {
+		create_slot(NULL);
+		((sc_pkcs11_slot_t*)list_get_at(&virtual_slots, 0))->id--;
+	}
+
 	/* Set initial event state on slots */
 	for (i=0; i<list_size(&virtual_slots); i++) {
 		sc_pkcs11_slot_t *slot = (sc_pkcs11_slot_t *) list_get_at(&virtual_slots, i);
@@ -376,9 +379,6 @@
 
 	/* Slot list can only change in v2.20 */
 	if (pSlotList == NULL_PTR && sc_pkcs11_conf.plug_and_play) {
-		/* Trick NSS into updating the slot list by changing the hotplug slot ID */
-		sc_pkcs11_slot_t *hotplug_slot = list_get_at(&virtual_slots, 0);
-		hotplug_slot->id--;
 		sc_ctx_detect_readers(context); 
 	}
 
@@ -607,8 +607,6 @@
 	sc_debug(context, SC_LOG_DEBUG_NORMAL, "C_WaitForSlotEvent(block=%d)", !(flags & CKF_DONT_BLOCK));
 	/* Not all pcsc-lite versions implement consistently used functions as they are */
 	/* FIXME: add proper checking into build to check correct pcsc-lite version for SCardStatusChange/SCardCancel */
-	if (!(flags & CKF_DONT_BLOCK))
-		return CKR_FUNCTION_NOT_SUPPORTED;
 	rv = sc_pkcs11_lock();
 	if (rv != CKR_OK)
 		return rv;
@@ -629,11 +627,15 @@
 	sc_pkcs11_unlock();
 	r = sc_wait_for_event(context, mask, &found, &events, -1, &reader_states);
 	if (sc_pkcs11_conf.plug_and_play && events & SC_EVENT_READER_ATTACHED) {
-		/* NSS/Firefox Triggers a C_GetSlotList(NULL) only if a slot ID is returned that it does not know yet
-		   Change the first hotplug slot id on every call to make this happen. */
-		sc_pkcs11_slot_t *hotplug_slot = list_get_at(&virtual_slots, 0);
-		*pSlot= hotplug_slot->id -1;
-	
+		sc_pkcs11_slot_t * slot = reader_get_slot(found);
+		if (found == NULL) {
+		  if (slot == NULL)
+		    slot_id = list_size(&virtual_slots);
+		  else 
+		    slot_id = (CK_SLOT_ID) list_locate(&virtual_slots, slot);
+		} else {
+		  slot_id = slot->id;
+		}
 		rv = sc_pkcs11_lock();
 		if (rv != CKR_OK)
 			return rv;
Only in opensc-0.12.2/src/pkcs11: pkcs11-global.c.orig
diff -ur opensc-0.12.2.orig/src/pkcs11/slot.c opensc-0.12.2/src/pkcs11/slot.c
--- opensc-0.12.2.orig/src/pkcs11/slot.c	2011-07-05 06:28:53.000000000 -0500
+++ opensc-0.12.2/src/pkcs11/slot.c	2011-10-20 23:53:31.365789156 -0500
@@ -36,7 +36,7 @@
 	NULL
 };
 
-static struct sc_pkcs11_slot * reader_get_slot(sc_reader_t *reader)
+struct sc_pkcs11_slot * reader_get_slot(sc_reader_t *reader)
 {
 	unsigned int i;
 
@@ -123,7 +123,15 @@
 	}
 
 	for (i = 0; i < sc_pkcs11_conf.slots_per_card; i++) {
-		rv = create_slot(reader);
+		struct sc_pkcs11_slot * slot = reader_get_slot(NULL);
+		if (slot == NULL) {
+			rv = create_slot(reader);
+		} else {
+			rv = CKR_OK;
+			slot->reader = reader;
+			slot->id = (CK_SLOT_ID) list_locate(&virtual_slots, slot);
+			strcpy_bp(slot->slot_info.slotDescription, reader->name, 64);
+		}
 		if (rv != CKR_OK)
 			return rv;
 	}
