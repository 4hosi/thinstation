# Functions

get_debug_level ()
{
    local dlevel=1 x=7 num
    num=$1
    while [ $x -gt 0 ] ; do
          let x=x-1
          let dlevel=$((num/(2**x)))
          if [ $dlevel -gt 0 ] ; then
                let num=$((num-(2**x)))
                case $x in
                0)
                  DEBUG_BOOT=1
                  ;;
                1)
                  DEBUG_NETWORK=2
                  ;;
                2)
                  DEBUG_INIT=4
                  ;;
                3)
                  DEBUG_KERNEL=8
                  ;;
                4)
                  DEBUG_MODULES=16
                  ;;
                5)
                  DEBUG_PACKAGES=32
                  ;;
                6)
                  DEBUG_EMAIL=64
                  ;;
                esac
          fi
    done
}

free_memory()
{
          if is_enabled $MEMORY_CONSTRAINED ; then
                rm -rf /lib/modules/*
                sync
                echo 3 > /proc/sys/vm/drop_caches
          fi
}

# If thinstation.network/user is a dos file, converts it to unix

cleanup ()
{
	if [ -e $TS_NETWORK ] ; then
		sed -e 's/\^M//g' $TS_NETWORK > $TS_NETWORK.tmp
		cat $TS_NETWORK.tmp > $TS_NETWORK
		rm $TS_NETWORK.tmp
	fi
	if [ -e $TS_USER ] ; then
		sed -e 's/\^M//g' $TS_USER > $TS_USER.tmp
		cat $TS_USER.tmp > $TS_USER
		rm $TS_USER.tmp
	fi

}

parse_tpl ()
{
    if [ -f $1.tpl ]; then
	cat $1.tpl | sed -f /tmp/script > $1
    fi
}

# Log to file and console
echo_log ()
{
	local debug noline string

	until [ -z "$1" ]; do
		case $1 in
		"-n")
			noline="-n"
		;;
		"-d")
			debug="TRUE"
		;;
		*)
			string=$1
		;;
		esac
		shift
	done
	if [ -n "$debug" ] ; then
		echo -e $noline $string > $CONSOLE
	fi
	echo -e $noline $string >> $LOGFILE
}

## PKG functions

pkg_is_loaded ()
{
    if [ -f /etc/init.d/$1 ] ; then
	return 0
    else
	return 1
    fi
}

pkg_is_executable ()
{
    if [ -x /bin/$1 ] ; then
	return 0
    else
	return 1
    fi
}

pkg_initialized ()
{
    if [ -f /var/packages/$1 ]; then
	return 0
    else
        return 1
    fi
}

pkg_set_init_flag ()
{
    touch /var/packages/$1
}

## Make variable capitals

make_caps ()
{
	if [ ! -z "$1" ]; then
		echo $1 | tr "[a-z]" "[A-Z]"
	else
		return 1
	fi
}

## Make variable lower

make_lower ()
{
	echo $1 | tr "[A-Z]" "[a-z]"
}

make_capital ()
{
   local word words badlist oneword x=0

   if [ "$1" = "-1" ] ; then
     oneword="TRUE"
     shift
   fi
   if [ $# -gt 1 ]; then
	until [ -z "$1" ]
	do
	     let x=x+1
	     case $1 in
	     VNC|TCP|ZLIB|SSL|CUPSD|JPEG|RDP|PNG|IPPPort|IPPPrinting)
		word=$1
		;;
	     *)
		if [ -z "$oneword" ] || [ $x -eq 1 ] ; then
		  word=`echo $1 | cut -c1 | tr "[a-z]" "[A-Z]"`
		  word=$word`echo $1 | cut -c2- | tr "[A-Z]" "[a-z]"`
		else
		  word=`echo $1 | tr "[A-Z]" "[a-z]"`
		fi
		;;
	     esac
	     shift
	     words="$words $word"
	done
	echo $words
   else
	case $1 in
	VNC|TCP|ZLIB|SSL|CUPSD|JPEG|RDP|PNG|IPPPort|IPPPrinting)
	   word=$1
	   ;;
	*)
	  word=`echo $1 | cut -c1 | tr "[a-z]" "[A-Z]"`
	  word=$word`echo $1 | cut -c2- | tr "[A-Z]" "[a-z]"`
	esac
	echo $word
   fi
}

# Window Manager dialogs

confirm_exit ()
{
        Xdialog --title "Logout" --clear --yesno "Click yes to Confirm Exit?" 10 60
}

dialog_get_server_address ()
{
if [ ! -z "$SERVER" ]; then
	echo $SERVER > /tmp/.dialog_$1_server
fi
if [ ! -z "$OPTIONS" ]; then
	echo "$OPTIONS" > /tmp/.dialog_$1_options
fi
if [ -e /tmp/.dialog_$1_server ] ; then
  DIALOG_SERVER=$(cat /tmp/.dialog_$1_server)
else
  touch /tmp/.dialog_$1_server
  DIALOG_SERVER="type server name here"
fi

if [ -e /tmp/.dialog_$1_options ] ; then
  DIALOG_OPTIONS=$(cat /tmp/.dialog_$1_options)
else
  touch /tmp/.dialog_$1_options
fi

# Now to business:
DIALOG_RESPONSE=`Xdialog --stdout --title $1 --left --icon /usr/icons/$1_32x32.xpm --2inputsbox "Preparing to run $1" \
                15 55 "Server name or IP number" "$DIALOG_SERVER" "Options" "$DIALOG_OPTIONS" ` 2>>$LOGFILE
if [ "$?" == "0" ] && [ ! -z "$DIALOG_RESPONSE" ] ; then
    DIALOG_LENGTH=`expr length "$DIALOG_RESPONSE"`
    DIALOG_SEPERATOR=`expr index "$DIALOG_RESPONSE" /`
    DIALOG_SERVER=`expr substr "$DIALOG_RESPONSE" 1 $(($DIALOG_SEPERATOR - 1))`
    DIALOG_OPTIONS=`expr substr "$DIALOG_RESPONSE" $(($DIALOG_SEPERATOR + 1)) $DIALOG_LENGTH`

    # preserve settings
    echo "$DIALOG_SERVER" > /tmp/.dialog_$1_server
    echo "$DIALOG_OPTIONS" > /tmp/.dialog_$1_options

    if [ "$DIALOG_SERVER" != "type server name here" ]; then
    SERVER="`echo $DIALOG_SERVER |grep -E -v '&|;|\(|\`'`"
    OPTIONS="`echo $DIALOG_OPTIONS |grep -E -v '&|;|\(|\`'`"
    fi
else
    echo "$DIALOG_SERVER" > /tmp/.dialog_$1_server
    SERVER=""
    OPTIONS=""
fi
}

dialog_no_value ()
{
        Xdialog --title "$1 Client" --clear --msgbox "You must enter value, aborted" 10 60 10000
}

dialog_get_value ()
{
        Xdialog --title "$1 Client" --clear --inputbox "Enter $2:" 10 60 2>&1 1>/dev/null |grep -E -v '&|;|\(|\`'
}

check_reconnect ()
{
  if [ -e /tmp/.X11-unix/X$DISPLAY_NUMBER ] ; then
	prompt="`make_caps $RECONNECT_PROMPT | cut -c1-4`" 
	NO_SESSION=`make_lower $NO_SESSION`
	if [ "$prompt" = "MENU" ] ; then
		prompt_time="`make_caps $RECONNECT_PROMPT | cut -c5-`" 
		if [ -n "$prompt_time" ] ; then
			kill_time=`date +%M`
			let kill_time=kill_time+prompt_time+1
			if [ $kill_time -gt 59 ] ; then
				let kill_time=kill_time-60
			fi
			echo "$kill_time  * * * * /bin/$NO_SESSION" >> /tmp/shutdown
			crontab /tmp/shutdown
		fi
		while [ "$choice_error" != "0" ] ; do
	        	choice=$(Xdialog --stdout --title "Reconnect/Shutdown?" --clear --no-cancel --combobox "Choose option then OK to continue." 10 60 Reconnect Shutdown)
			choice_error=$?
		done
		if [ "$choice" = "Shutdown" ] ; then
			shutdown
		elif [ -e /tmp/shutdown ] ; then
			crontab /tmp/crontab
			rm /tmp/shutdown
			reconnect=0
		fi
	elif [ "$prompt" = "AUTO" ] ; then
		prompt_time="`make_caps $RECONNECT_PROMPT | cut -c5-`" 
		if [ -z "$prompt_time" ] ; then
		    prompt_time=10
		fi
		Xdialog --title "No Server Response" --clear --timeout $prompt_time --msgbox "Server not responding - waiting $prompt_time seconds" 10 60
		reconnect=0
	elif [ "$prompt" == "FORCE" ]; then
		reconnect=0
	elif [ "$prompt" != "OFF" ] ; then
        	Xdialog --title "Reconnect?" --clear --yesno "Click yes to reconnect." 10 60
		reconnect=$?
	else
		reconnect=1
	fi
  fi
echo $reconnect
}

## Replace on or off with #

replace_variable ()
{
	if [ `make_caps $1` = "ON" ] ; then
		echo " "
	else
		echo "#"
	fi
}

## Replace space

replace_char ()
{
	echo $1 | sed -e "s/$2/$3/g"
}

# Check for invalid characters in options line

replace_invalid ()
{
	echo $1 | sed -e 's/ /\\ /g' | sed -e 's/\-/\\\-/g' |  sed -e 's/\//\\\//g'
}


# Overwrite file with sed command

sed_file ()
{
	cat $1 | sed -e $2 > /tmp/sed.tmp
	cat /tmp/sed.tmp > $1
	rm /tmp/sed.tmp
}

## Restart xinetd

restart_xinetd ()
{
	XPID=`pidof xinetd`
	kill -SIGHUP $XPID
}

# Checks when to reboot PC

check_reboot ()
{
   if is_enabled $DAILY_REBOOT ; then
	if uptime | grep day; then
		reboot
	fi
   fi
}

# Cleans up X if it shuts down unexpected

check_xrunning ()
{
	if ! ps -ef | grep "$X_SERVER" | grep -q " :$DISPLAY_NUMBER"; then
          if [ -e /tmp/.X11-unix/X$DISPLAY_NUMBER ] ; then
		rm /tmp/.X11-unix/X$DISPLAY_NUMBER
	  fi
	fi
}

# Checks to see if nxssh is running

check_NX ()
{
	while ps | grep -v grep | grep "nxssh"
	do
		sleep 5
	done
}


# Start X

start_x ()
{
	if [ -e /etc/init.d/x ] && [ ! -e /tmp/.X11-unix/X$DISPLAY_NUMBER ]; then
		clear
		chvt 4
		/etc/init.d/x start
	elif [ ! -e /etc/init.d/x ] ; then
		echo "Can't find X" >> $LOGFILE
		sleep 1
	fi
}


# Check if Module loaded
check_module ()
{
	if lsmod | grep $1 > /dev/null ; then
		return 0
	else
		return 1
	fi
}

# Get Free XServer Number
getfreescreen ()
{
	local X_NUMBER

        X_NUMBER=`ps -ef | grep "Xorg " | cut -f2 -d: | cut -f1 -d" "`
	x_NUMBER=$X_NUMBER `ps -ef | grep "Xnest "  | cut -f2 -d: | cut -f1 -d" "`
        let XNEST_NUMBER=0
        for x in $x_NUMBER;
        do
                if [ "$x" -ge "$XNEST_NUMBER" ] ; then
                        let XNEST_NUMBER=x+1
                fi
        done
}

get_filesystems ()
{
        for filename in $FILESYSTEMS
        do
                if [ -e $MOD_PATH/inbuilt/$filename.ko ] || [ -e $MOD_PATH/loaded/$filename.ko ] ; then
			if [ "$filename" != "supermount" ] ; then
                		filesystem=$filename:$filesystem
			fi
		        if ! check_module $filename ; then
               			modprobe $filename
        		fi
                fi
        done
	let length=${#filesystem}-1
	if [ "$length" -gt 0 ] ; then
		filesystem=`echo $filesystem | cut -c 1-$length`
	fi
}

getpostcontent ()
{
	CONTENT=
	if [ -n "$CONTENT_LENGTH" ]
	then
		read CONTENT
	fi
	if [ -n "$CONTENT" ]
	then
		eval `echo "&$CONTENT" | sed s/"&"/"\nCGI_"/g`
	fi
}


# Below code taken from PXES with modifications

#----------------------------------------------------------------------
#      ___       ___ ___   P X E S   Universal  Linux  Thin  Client
#     /__/\\_// /__ /__    Copyright(C) 2003 by Diego Torres Milano
#    /    // \\/__  __/    All rights reserved.  http://pxes.sf.net
#
# Author: Diego Torres Milano <diego@pxes.com.ar>
# $Id: xtools,v 1.2 2003/09/25 02:10:34 diego Exp $
#----------------------------------------------------------------------

refresh ()
{
	local UPDATE=${1:-60}

	echo '
<meta HTTP-EQUIV="REFRESH" CONTENT="'$UPDATE'">
<meta HTTP-EQUIV="EXPIRES" CONTENT="'`/bin/date +%s`'">
'
}

header ()
{
echo -e "Content-Type: text/html\n"
echo '
<html>

<head>
  <title>:: ThinStation ::</title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <link href="../style.css" rel="stylesheet" type="text/css">
</head>

<body bgcolor="#FFFFFF" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">

<tr>
	<a href="../index.html">
            <img src="../images/ts_logo.jpg" width="650" height="153" border="0" alt="Thinstation logo">
	</a>
</tr>


<h2>Thinstation '`echo $TS_VERSION`' on '`hostname`' :: '`basename $0 .cgi`'</h2>
<pre>&nbsp;</pre>
'
}

trailer ()
{
	echo '</body>'
	echo '</html>'
}

# Verify's Web Password

getpasswd ()
{
	local LOGIN=$1

	set +x

	if [ -z "$LOGIN" ]
	then
		echo "ERROR: Invalid login" >&2
		return
	fi

	sed -n "s/^$LOGIN:\\([^:]*\\):.*/\\1/p" < /etc/passwd
}

verify_password ()
{
	local LOGIN=$1 PASSWD=$2 p s e

	if [ -z "$LOGIN" ]
	then
		echo "Null login" >&2
		return 1
	fi

	if [ -z "$PASSWD" ]
	then
		echo "Null password" >&2
		return 1
	fi

	p=`getpasswd $LOGIN`
	s=`echo "$p" | cut -f1-3 -d\$`
	e=`/bin/checkpass $PASSWD $s`

	if [ "$p" = "$e" ]
	then
		return 0
	else
		return 1
	fi
}


# args: list of files to save when the cache is umounted
#       Note that the 'profile' file is already handled and thus shouldn't
#       be included in the list.
pgrep () {
ps |grep $1 |grep -v grep |awk '{print $1}'
}

is_enabled ()
{
	local switch
	if [ ! -z "$1" ]; then
		value=`make_caps $1`
		for i in TRUE ON ENABLED YES POSITIVE Y; do
			if [ $value == $i ]; then
				switch=0
			fi
		done
	fi
        if [ "$switch" == "0" ] ; then
		return 0
	else
		return 1
	fi
}

is_disabled ()
{
        local switch
        if [ ! -z "$1" ]; then
                value=`make_caps $1`
        	for i in FALSE OFF DISABLED NO NEGATIVE N ; do
                	if [ $value == $i ]; then
                        	switch=0
                	fi
        	done
	else
		switch=0
	fi
        if [ "$switch" == "0" ] ; then
                return 0
        else
                return 1
        fi
}

screen_res ()
{
	if [ -z "$SCREEN_RESOLUTION" ]; then
		video="`cat /proc/cmdline |grep -o -E video=[a-zA-Z0-9:,-]+ |head -n 1 |cut -d = -f2`"
		if [ "$video" != "uvesafb:off" ]; then
			SCREEN_RESOLUTION=`echo $video |cut -d ":" -f2 |cut -d "-" -f1`
		else
			SCREEN_RESOLUTION=$PREFERED_RES
        	fi
	fi
}

use_xrandr ()
{
	if is_enabled $USE_XRANDR ; then
        	echo "Using xrandr to set display resolution." >> $LOGFILE
		sleep .25
        	if [ "$XRANDR_OPTIONS" == "" ]; then
		    	xrandr -s $SCREEN_RESOLUTION
        	else
                	xrandr $XRANDR_OPTIONS
        	fi
	fi
}

use_wallpaper ()
{
	if is_enabled $USE_WALLPAPER && [ -e /bin/wmsetbg ] ; then
        	if [ -f /etc/background.jpg ] ; then
                	wmsetbg /etc/background.jpg 2>/dev/null
        	elif [ -f /etc/background-$SCREEN_RESOLUTION.jpg ] ; then
                	wmsetbg /etc/background-$SCREEN_RESOLUTION.jpg 2>/dev/null
        	elif [ -f /etc/background-1024x768.jpg ]; then
                	wmsetbg /etc/background-1024x768.jpg 2>/dev/null
		else
			echo_log "No wallpaper found"
        	fi
	fi
}

x_mod_map ()
{
 # Add xmodmap modifications
        if [ -e /lib/kmaps/$KEYBOARD_MAP.xmod ] ; then
                xmodmap /lib/kmaps/$KEYBOARD_MAP.xmod
        fi
}

x_numlock ()
{
        if is_enabled $X_NUMLOCK ; then
                numlockx `make_lower $X_NUMLOCK`
        fi
}

x_auth_file ()
{
	# If Don't already have an Xauthority file, create one now.
	if [ ! -e $HOME/.Xauthority ] ; then
		touch $HOME/.Xauthority
		xauth -f $HOME/.Xauthority generate :$DISPLAY_NUMBER.0 . trusted >> $LOGFILE 2>&1
	fi
}

x_wm ()
{
	# Are We Running Any Known Window Managers
	unset flag
	WMS="icewm openbox xfce"
	for i in $WMS; do
		if pidof $i ; then
			flag=true
		fi
	done
	if is_enabled $flag ; then
		echo_log "Found a Window Manager"
		return 0
	else
		echo_log "Failed to find a Window Manager"
		return 1
	fi
}

x_mouse ()
{
	# If we don't have a Window Manager, give the mouse a place to hang out.
	if ! x_wm ; then
		xsetroot -cursor_name top_left_arrow >> $LOGFILE 2>&1 &
	fi
	# Set the mouse acceleration speed
	if [ -n "$MOUSE_ACCELERATION" ]; then
		echo xset -display :$DISPLAY_NUMBER m ${MOUSE_ACCELERATION} 1 >> $LOGFILE
		xset -display :$DISPLAY_NUMBER m ${MOUSE_ACCELERATION} 1 >> $LOGFILE 2>&1 &
	fi
}
